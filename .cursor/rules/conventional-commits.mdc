# Conventional Commit Messages

**ALWAYS use Conventional Commits format for all commit messages:**

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Commit Types
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing tests or correcting existing tests
- `build`: Changes that affect the build system or external dependencies
- `ci`: Changes to CI configuration files and scripts
- `chore`: Other changes that don't modify src or test files

## Examples
- `feat: implement full-window simulation display`
- `fix: resolve dropdown visibility issue`
- `docs: update README with installation instructions`
- `refactor: extract modal component for reusability`

## Breaking Changes
Use `!` after type/scope: `feat!: change API interface`
