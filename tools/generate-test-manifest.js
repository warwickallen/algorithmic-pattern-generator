#!/usr/bin/env node
/*
 Generates tests/manifest.json and tests/manifest.js by scanning tests/ directory
*/
const fs = require("fs");
const path = require("path");

const projectRoot = path.resolve(__dirname, "..");
const testsDir = path.join(projectRoot, "tests");
const manifestJsonPath = path.join(testsDir, "manifest.json");
const manifestJsPath = path.join(testsDir, "manifest.js");

function isTestFile(filePath) {
  return filePath.endsWith(".js") && !filePath.endsWith("manifest.js");
}

function walk(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  let files = [];
  for (const entry of entries) {
    if (entry.name.startsWith(".")) continue;
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      files = files.concat(walk(full));
    } else if (entry.isFile() && isTestFile(full)) {
      files.push(full);
    }
  }
  return files;
}

function toRepoRelative(p) {
  return p.replace(projectRoot + path.sep, "").replace(/\\/g, "/");
}

function main() {
  if (!fs.existsSync(testsDir)) {
    console.error("tests/ directory not found. Nothing to do.");
    process.exit(0);
  }
  // Read project version if available
  let version = null;
  try {
    const versionPath = path.join(projectRoot, "VERSION");
    if (fs.existsSync(versionPath)) {
      version = fs.readFileSync(versionPath, "utf8").trim();
    }
  } catch (e) {
    // Best-effort only; ignore errors
  }
  const files = walk(testsDir)
    .map(toRepoRelative)
    .filter((p) => p !== "tests/manifest.js" && p !== "tests/manifest.json")
    .sort();

  // Build per-file test counts by scanning for runner.addTest occurrences
  const counts = {};
  let totalTests = 0;
  for (const relPath of files) {
    try {
      const absPath = path.join(projectRoot, relPath);
      const content = fs.readFileSync(absPath, "utf8");
      const match = content.match(/runner\.addTest\s*\(/g);
      const count = match ? match.length : 0;
      counts[relPath] = count;
      totalTests += count;
    } catch (e) {
      counts[relPath] = 0;
    }
  }

  const manifest = { version, files, counts, totalTests };
  const json = JSON.stringify(manifest, null, 2) + "\n";
  fs.writeFileSync(manifestJsonPath, json, "utf8");

  const js =
    `// Auto-generated by tools/generate-test-manifest.js\n` +
    `window.TEST_MANIFEST = ${json}`;
  fs.writeFileSync(manifestJsPath, js, "utf8");

  console.log(`Wrote ${files.length} test file(s) to manifest.`);
}

main();
